version: "3.3"

volumes:
  portainer_data: {}
  restyaboard_db: {}
  restyaboard_media: {}
  traefik_staging_certs: {}
  traefik_prod_certs: {}

networks:
  traefik_net:

services:
  restyaboard:
    # image: restyaplatform/restyaboard:dev
    image: restyaplatform/restyaboard@sha256:e0392d4831d521b28387ff3210cd388fd37ecdb26bb54fbe22d39ee1d5896a68
    environment:
      POSTGRES_DB: restyaboard
      POSTGRES_HOST: postgres
      POSTGRES_PASSWORD: CHANGE_ME
      POSTGRES_USER: admin
      SMTP_DOMAIN: domain
      SMTP_USERNAME: user
      SMTP_PASSWORD: pass
      SMTP_SERVER: server
      SMTP_PORT: 465
      TZ: Etc/UTC
    volumes:
      - restyaboard_media:/usr/share/nginx/html/media
    networks:
      - traefik_net
    deploy:
      labels:
        - "traefik.backend.loadbalancer.sticky=true"
        - "traefik.backend.loadbalancer.swarm=true"
        # the backend service needs a name
        - "traefik.backend=restyaboard"
        # generate a TLS cert for this domain
        - "traefik.entrypoints=https"
        - "traefik.frontend.passHostHeader=true"
        # add your domain below here
        - "traefik.frontend.rule=Host:board.jh2019.info"
        - "traefik.port=80"
      restart_policy:
        condition: on-failure

  postgres:
    # image: postgres:9-alpine
    image: postgres@sha256:215ad1cb0084e32ef2648394f8d08c9cfa29a86371ebe9e4c88b0dd51aa0bfdc
    environment:
      POSTGRES_DB: restyaboard
      POSTGRES_HOST: postgres
      POSTGRES_PASSWORD: CHANGE_ME
      POSTGRES_USER: admin
    volumes:
      - restyaboard_db:/var/lib/postgresql/data
    networks:
      - traefik_net

  traefik:
    image: traefik:1.7.9
    command:
      - "--api"
      - "--entrypoints=Name:http Address::80 Redirect.EntryPoint:https"
      - "--entrypoints=Name:https Address::443 TLS"
      - "--defaultentrypoints=http,https"
      - "--acme"
      - "--acme.storage=/acme/certs.json"
      - "--acme.entryPoint=https"
      - "--acme.httpChallenge.entryPoint=http"
      - "--acme.onHostRule=true"
      - "--acme.onDemand=false"
      - "--acme.email=jahresheft@waldorfschule-erlangen.de"
      # - "--acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--docker"
      - "--docker.swarmMode"
      - "--docker.domain=jh2019.info"
      - "--docker.watch"
      - "--logLevel=DEBUG"
    ports:
      - "80:80"     #The HTTP port
      - "8080:8080" #The Web UI (enabled by --api)
      - "443:443"
    networks:
      - traefik_net
    volumes:
      # traefik needs the docker socket in order to work properly
      - /var/run/docker.sock:/var/run/docker.sock
      # no traefik config file is being used
      # you can deep further in the traefik docs
      # http://docs.traefik.io/user-guide/examples/
      - /dev/null:/traefik.toml
      # use a named-volume for certs persistency
      # - traefik_staging_certs:/acme
      - traefik_prod_certs:/acme
    deploy:
      placement:
        constraints: [node.role==manager]
      restart_policy:
        condition: on-failure

  portainer:
    # image: portainer/portainer:1.20.1
    image: portainer/portainer@sha256:ac9aeaf784962573baf26c03cd9709114d7fbfe7e5bd690b1f8e3b46642e67ea
    networks:
      - traefik_net
    volumes:
      - portainer_data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      labels:
        - "traefik.backend.loadbalancer.sticky=true"
        - "traefik.backend.loadbalancer.swarm=true"
        # the backend service needs a name
        - "traefik.backend=portainer"
        # generate a TLS cert for this domain
        - "traefik.entrypoints=https"
        - "traefik.frontend.passHostHeader=true"
        # add your domain below here
        - "traefik.frontend.rule=Host:portainer.jh2019.info"
        - "traefik.port=9000"
      placement:
        constraints: [node.role==manager]
      restart_policy:
        condition: on-failure
